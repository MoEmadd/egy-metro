import streamlit as st
import networkx as nx
import matplotlib.pyplot as plt
import arabic_reshaper
from bidi.algorithm import get_display

# ุชุนุฑูู ุฎุทูุท ุงููุชุฑู ุทุจูุงู ููุตูุฑุฉ ุงูุฃุฎูุฑุฉ
metro_lines = {
    "ุงูุฎุท ุงูุฃูู": [
        "ุญููุงู", "ุนูู ุญููุงู", "ุฌุงูุนุฉ ุญููุงู", "ูุงุฏู ุญูู", "ุญุฏุงุฆู ุญููุงู", "ุงููุนุตุฑุฉ", "ุทุฑุฉ ุงูุฃุณููุช", "ููุชุณููุง", "ุทุฑู ุงูุจูุฏ",
        "ุซููุงุช ุงููุนุงุฏู", "ุงููุนุงุฏู", "ุญุฏุงุฆู ุงููุนุงุฏู", "ุฏุงุฑ ุงูุณูุงู", "ุงูููู ุงูุตุงูุญ", "ูุงุฑ ุฌุฑุฌุณ", "ุงูุณูุฏุฉ ุฒููุจ",
        "ุณุนุฏ ุฒุบููู", "ุงูุณุงุฏุงุช", "ูุงุตุฑ", "ุงูุดูุฏุงุก", "ุบูุฑุฉ", "ุงูุฏูุฑุฏุงุด", "ููุดูุฉ ุงูุตุฏุฑ", "ููุจุฑู ุงููุจุฉ", "ุญูุงูุงุช ุงููุจุฉ",
        "ุณุฑุงู ุงููุจุฉ", "ุญุฏุงุฆู ุงูุฒูุชูู", "ุญูููุฉ ุงูุฒูุชูู", "ุงููุทุฑูุฉ", "ุนูู ุดูุณ", "ุนุฒุจุฉ ุงููุฎู", "ุงููุฑุฌ", "ุงููุฑุฌ ุงูุฌุฏูุฏุฉ"
    ],
    "ุงูุฎุท ุงูุซุงูู": [
        "ุงููููุจ", "ุณุงููุฉ ููู", "ุฃู ุงููุตุฑููู", "ุงูุฌูุฒุฉ", "ููุตู", "ุฌุงูุนุฉ ุงููุงูุฑุฉ", "ุงูุจุญูุซ", "ุงูุฏูู", "ุงูุฃูุจุฑุง",
        "ุงูุณุงุฏุงุช", "ูุญูุฏ ูุฌูุจ", "ุงูุนุชุจุฉ", "ุงูุดูุฏุงุก", "ูุณุฑุฉ", "ุฑูุถ ุงููุฑุฌ", "ุณุงูุช ุชุฑูุฒุง", "ุงูุฎููุงูู", "ุงููุธูุงุช",
        "ูููุฉ ุงูุฒุฑุงุนุฉ", "ุดุจุฑุง ุงูุฎููุฉ"
    ],
    "ุงูุฎุท ุงูุซุงูุซ": [
        "ุนุฏูู ููุตูุฑ", "ุงููุงููุณุชุจ", "ุนูุฑ ุจู ุงูุฎุทุงุจ", "ูุจุงุก", "ูุดุงู ุจุฑูุงุช", "ุงููุฒูุฉ", "ูุงุฏู ุงูุดูุณ", "ุฃูู ูุณูู",
        "ูุงุฑูู", "ููููุจูููุณ", "ูููุฉ ุงูุจูุงุช", "ุงูุฃูุฑุงู", "ููุฏุงู ููููุจูููุณ", "ุฃุฑุถ ุงููุนุงุฑุถ", "ุงูุงุณุชุงุฏ", "ุนุจุงุณ ุงูุนูุงุฏ",
        "ุงูุนุจุงุณูุฉ", "ุนุจุฏู ุจุงุดุง", "ุจุงุจ ุงูุดุนุฑูุฉ", "ุงูุนุชุจุฉ"
    ]
}

# ุฅูุดุงุก ุงูุฌุฑุงู ูุฑุจุท ุงููุญุทุงุช
G = nx.Graph()
station_to_lines = {}

for line, stations in metro_lines.items():
    for i in range(len(stations) - 1):
        G.add_edge(stations[i], stations[i + 1], line=line)
    for station in stations:
        station_to_lines.setdefault(station, set()).add(line)

all_stations = sorted(station_to_lines.keys())

# ุฏุงูุฉ ุฅูุฌุงุฏ ุฃูุถู ูุณุงุฑ
def find_best_path(start, end):
    if start == end:
        return [start], "ุฃูุช ุจุงููุนู ูู ุงููุญุทุฉ ุงููุทููุจุฉ."

    # ุชุญูู ูู ูุฌูุฏ ุฎุท ูุจุงุดุฑ
    for line, stations in metro_lines.items():
        if start in stations and end in stations:
            i1, i2 = stations.index(start), stations.index(end)
            path = stations[i1:i2+1] if i1 < i2 else stations[i2:i1+1][::-1]
            desc = f"๐ ุงุฑูุจ {line} ูู {start} ุฅูู {end}:\n" + " โ ".join(path[1:])
            return path, desc

    # ุงุณุชุฎุฏุงู NetworkX
    try:
        path = nx.shortest_path(G, start, end)
    except nx.NetworkXNoPath:
        return None, "โ ูุง ููุฌุฏ ูุณุงุฑ ุจูู ุงููุญุทุชูู."

    # ุจูุงุก ุงููุตู
    description = []
    current_line = None
    for i in range(len(path) - 1):
        edge_data = G.get_edge_data(path[i], path[i + 1])
        line = edge_data['line']
        if line != current_line:
            description.append(f"\n๐ ุงุฑูุจ {line} ูู {path[i]}")
            current_line = line
        description.append(f" โ {path[i + 1]}")
    return path, "".join(description)

# ุฑุณู ุงููุณุงุฑ
def draw_path(path):
    pos = nx.spring_layout(G, seed=42)
    reshaped_labels = {n: get_display(arabic_reshaper.reshape(n)) for n in G.nodes}
    fig, ax = plt.subplots(figsize=(10, 6))
    nx.draw(G, pos, node_color="lightgray", node_size=100, ax=ax)
    nx.draw_networkx_labels(G, pos, labels=reshaped_labels, font_size=9, ax=ax)
    if path:
        edges = list(zip(path, path[1:]))
        nx.draw_networkx_nodes(G, pos, nodelist=path, node_color="lightblue", node_size=300, ax=ax)
        nx.draw_networkx_edges(G, pos, edgelist=edges, edge_color="red", width=2, ax=ax)
    ax.set_title(get_display(arabic_reshaper.reshape("ูุณุงุฑ ุงููุชุฑู")))
    ax.axis("off")
    st.pyplot(fig)

# ุฅุนุฏุงุฏ Streamlit
st.set_page_config(page_title="ุฏููู ูุชุฑู ุงููุงูุฑุฉ", layout="centered")
st.title("๐ ุฏููู ูุชุฑู ุงููุงูุฑุฉ")

start = st.selectbox("ุงุฎุชุฑ ูุญุทุฉ ุงูุจุฏุงูุฉ", all_stations)
end = st.selectbox("ุงุฎุชุฑ ูุญุทุฉ ุงููุตูู", all_stations)

if st.button("ุงุนุฑุถ ุงููุณุงุฑ"):
    path, desc = find_best_path(start, end)
    if path:
        st.text(desc)
        draw_path(path)
    else:
        st.error(desc)
